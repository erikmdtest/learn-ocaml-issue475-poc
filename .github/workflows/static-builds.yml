name: Generate static binaries
on:
  push:
    branches:
      - master
    tags:
      - '*'
  pull_request:
    branches:
      - '**'
jobs:
  learn-ocaml-www-zip:
    name: Build learn-ocaml-www.zip archive
    if: ${{ github.event_name != 'schedule' || github.repository == 'pfitaxel/learn-ocaml-issue475-poc' }}
    runs-on: ubuntu-latest
    outputs:
      artifact: ${{ steps.export.outputs.artifact }}
    strategy:
      matrix:
        arch_dir: ["learn-ocaml-www"]
        # we could use an env var, albeit it would be less convenient
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3
      - name: 'Build ${{ matrix.arch_dir }}.zip'
        run: |
          url="https://ocaml-sf.org/learn-ocaml/"
          mkdir "${{ matrix.arch_dir }}"
          sed -e "s|{{url}}|$url|g" index.html.mustache >"${{ matrix.arch_dir }}/index.html"
          zip -r "${{ matrix.arch_dir }}.zip" "${{ matrix.arch_dir }}"
      - name: 'Upload ${{ matrix.arch_dir }}.zip'
        uses: actions/upload-artifact@v2
        with:
          name: '${{ matrix.arch_dir }}.zip'
          path: '${{ matrix.arch_dir }}.zip'
      - id: export
        name: Export artifact filename
        run: echo "artifact=${{ matrix.arch_dir }}.zip" >> $GITHUB_OUTPUT
        # this last step is not necessary

  # Make artifacts links more visible for the upstream project
  add-artifacts-links:
    # permissions:
    #   checks: write
    name: Add artifacts links to commit status
    if: ${{ github.event_name != 'schedule' && github.repository == 'pfitaxel/learn-ocaml-issue475-poc' }}
    runs-on: ubuntu-latest
    needs:
      - learn-ocaml-www-zip
    steps:
      - name: Get links
        run: |
          suite_id=$(curl \
          -H "Accept: application/vnd.github+json" \
          "https://api.github.com/repos/ocaml-sf/learn-ocaml/actions/runs/${{ github.run_id }}" \
          | jq '.check_suite_id')

          curl \
          -H "Accept: application/vnd.github+json" \
          "https://api.github.com/repos/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts" \
          | jq '[.artifacts | .[] | {"id": .id, "name": .name, "created_at": .created_at, "expires_at": .expires_at, "archive_download_url": .archive_download_url} | sort_by(.name)]' \
          > artifacts.json

          cat artifacts.json

          commit_sha="${{ github.event.pull_request.head.sha }}"
          echo "commit_sha=${commit_sha} (1-if-PR)"
          if [ -z "${commit_sha}" ]; then commit_sha="${{ github.sha }}"; fi
          echo "commit_sha=${commit_sha} (2-concl)"

          < artifacts.json jq -r ".[] | \
            ( .id | tostring | \"https://github.com/${{ github.repository }}/suites/${suite_id}/artifacts/\" + . ) + \"§\" + \
            ( .name + \" [\" + ( .created_at | sub(\"T.*\"; \" → \") ) + ( .expires_at | sub(\"T.*\"; \"] (you must be logged)\" ) ) )" \
          | while IFS="§" read url descr; do
              curl \
              -X POST \
              -H "Accept: application/vnd.github+json" \
              -H "Authorization: Bearer ${{ github.token }}" \
              "https://api.github.com/repos/${{ github.repository }}/statuses/${commit_sha}" \
              -d "$(printf '{"state":"success","target_url":"%s","description":"%s","context":"continuous-integration/gha"}' "$url" "%descr")"
          done
